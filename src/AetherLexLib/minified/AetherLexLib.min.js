import{learningDataProvided}from"../data.js";import{stemmingData}from"../data.stemming.js";import{lemmatizationData}from"../data.lemmatization.js";import{posDictionary}from"../data.tags.js";import Fuse from"https://cdn.skypack.dev/fuse.js";import nlp from"https://cdn.skypack.dev/compromise";let conversationData={history:[],context:{}};const responses={greetings:["hello","hi","hey","greetings"],farewell:["goodbye","bye","see you","farewell"],affirmations:["yes","yep","sure","ok","okay"],negations:["no","nope","not really"],gratitude:["thanks","thank you","thx"],help:["help","assist","support","how can I help"],confusion:["huh","what","i don't understand"]};function parseLearningData(t){const e=t.trim().split("\n\n").filter(Boolean),n=[];for(const t of e){const e=t.split("\n").map((t=>t.trim())).filter(Boolean);for(let t=0;t<e.length;t+=2)if(void 0!==e[t+1]){const a=normalizeText(e[t]),o=normalizeText(e[t+1]);n.push({userMessage:a,aiResponse:o})}}return n}const parsedLearningData=parseLearningData(learningDataProvided),fuse=new Fuse(parsedLearningData,{keys:["userMessage"],includeScore:!0,threshold:.3,minMatchCharLength:2,shouldSort:!0});function tokenize(t){const e=new Set(["who","what","when","where","why","is","the","a","of","on","and","for","with","to","from","by"]);return(t.toLowerCase().match(/\w+/g)||[]).filter((t=>!e.has(t)))}function stemWord(t){for(const[e,n]of Object.entries(stemmingData))if(n.includes(t))return e;return t}function lemmatizeWord(t){return lemmatizationData[t]||t}function normalizeText(t){const e={yu:"you",u:"you",r:"are",wat:"what"};let n=t.toLowerCase().replace(/[.,!?]/g,"").replace(/\s+/g," ").trim();for(const[t,a]of Object.entries(e))n=n.replace(new RegExp(`\\b${t}\\b`,"g"),a);return n.split(" ").map((t=>lemmatizeWord(stemWord(t)))).join(" ")}function segmentSentences(t){return t.split(/(?<=[.!?])\s+/)}function tagPartOfSpeech(t){return t.map((t=>({word:t,tag:posDictionary[t]||"Unknown"})))}function tagNamedEntities(t){const e=nlp(t);return e.people().out("array").map((t=>({word:t,tag:"Person"}))).concat(e.places().out("array").map((t=>({word:t,tag:"Place"})))).concat(e.organizations().out("array").map((t=>({word:t,tag:"Organization"}))))}async function analyzeAndRespond(t){const e=normalizeText(t),n=tagPartOfSpeech(tokenize(e)),a=tagNamedEntities(t);if(console.log("Part of Speech Tags:",n),console.log("Named Entities:",a),updateContext(e),isCalculation(e)){const t=calculate(e);return updateConversationData(e,t),t}const o=findBestLearningMatch(e);if(o){const t=checkForRepetition(e,o);return updateConversationData(e,t),t}const r=await queryWikidata(e);if(r)return updateConversationData(e,r),r;const i="Sorry, I couldn't find any information on that. Try asking me something different.";return updateConversationData(e,i),i}async function queryWikidata(t){const e=tokenize(t).join(" "),n=`https://www.wikidata.org/w/api.php?action=wbsearchentities&search=${encodeURIComponent(e)}&format=json&language=en&limit=1&origin=*`;try{const t=await fetch(n);if(!t.ok)throw new Error("Failed to fetch from Wikidata");const e=await t.json();if(e.search&&e.search.length>0){const t=e.search[0],n=`https://www.wikidata.org/wiki/${t.id}`;return`I found information about "<strong>${t.label}</strong>": ${t.description||"No description available."} <a href="${n}" target="_blank">More info</a>`}}catch(t){return console.error("Error fetching from Wikidata:",t),null}return null}function isCalculation(t){return/(\bpi\b|[-+]?[0-9]*\.?[0-9]+)(\s*[-+*/]\s*(\bpi\b|[-+]?[0-9]*\.?[0-9]+))+/.test(t)}function calculate(t){try{const e=t.replace(/\bpi\b/g,"Math.PI").replace(/(\b(sin|cos|tan|sqrt|abs)\b)/g,"Math.$1");return`The result is: ${new Function(`return ${e}`)()}`}catch(t){return"Sorry, I couldn't calculate that."}}function findBestLearningMatch(t){const e=tokenize(t).map(stemWord),n=fuse.search(e.join(" "));return n.length>0?n[0].item.aiResponse:null}function generateDynamicResponse(t){const e=["That's interesting! Can you tell me more about that?","I'm not sure I follow. Could you clarify your thoughts?","Sounds good! What else do you want to discuss?","I see! How can I assist you further?","That makes sense. What's your next question?","I'm here to help! What do you need assistance with?","Could you elaborate on that?"];return e[Math.floor(Math.random()*e.length)]}function checkForRepetition(t,e){const n=conversationData.history.length>0?conversationData.history[conversationData.history.length-1].aiResponse:null;return conversationData.history.map((t=>t.userInput)).includes(t)&&e===n?generateDynamicResponse(t):e}function updateContext(t){t.includes("name")&&(conversationData.context.name=t.split(" ").pop())}function updateConversationData(t,e){conversationData.history.push({userInput:t,aiResponse:e})}export{analyzeAndRespond,queryWikidata,calculate,updateConversationData,tokenize,segmentSentences,tagPartOfSpeech};