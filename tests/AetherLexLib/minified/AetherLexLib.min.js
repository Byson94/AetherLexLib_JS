import{learningDataProvided}from"./data.js";import{stemmingData}from"./data.stemming.js";import{lemmatizationData}from"./data.lemmatization.js";import{posDictionary}from"./data.tags.js";import{responses}from"./responces.js";import Fuse from"https://cdn.skypack.dev/fuse.js";import nlp from"https://cdn.skypack.dev/compromise";let conversationData={history:[],context:{}};function parseLearningData(e){const t=e.trim().split("\n\n").filter(Boolean),n=[];for(const e of t){const t=e.split("\n").map((e=>e.trim())).filter(Boolean);for(let e=0;e<t.length;e+=2)if(void 0!==t[e+1]){const o=normalizeText(t[e]),r=normalizeText(t[e+1]);n.push({userMessage:o,aiResponse:r})}}return n}const parsedLearningData=parseLearningData(learningDataProvided),fuse=new Fuse(parsedLearningData,{keys:["userMessage"],includeScore:!0,threshold:.3,minMatchCharLength:2,shouldSort:!0});function tokenize(e){const t=new Set(["who","what","when","where","why","is","the","a","of","on","and","for","with","to","from","by"]);return(e.toLowerCase().match(/\w+/g)||[]).filter((e=>!t.has(e)))}function stemWord(e){for(const[t,n]of Object.entries(stemmingData))if(n.includes(e))return t;return e}function lemmatizeWord(e){return lemmatizationData[e]||e}function detectIntent(e){const t=e.toLowerCase();return responses.greetings.some((e=>t.includes(e)))?"greetings":responses.farewell.some((e=>t.includes(e)))?"farewell":responses.affirmations.some((e=>t.includes(e)))?"affirmations":responses.negations.some((e=>t.includes(e)))?"negations":responses.gratitude.some((e=>t.includes(e)))?"gratitude":responses.help.some((e=>t.includes(e)))?"help":responses.confusion.some((e=>t.includes(e)))?"confusion":responses.questions.some((e=>t.includes(e)))?"questions":/calculate|solve|result|math|add|subtract|multiply|divide|sum|total/i.test(t)?"calculation":"unknown"}function normalizeText(e){const t={yu:"you",u:"you",r:"are",wat:"what"};let n=e.toLowerCase().replace(/[.,!?]+/g," ").replace(/\s+/g," ").trim();for(const[e,o]of Object.entries(t))n=n.replace(new RegExp(`\\b${e}\\b`,"g"),o);return n}function segmentSentences(e){return e.split(/(?<=[.!?])\s+|(?<=\b(and|but|or|so)\b)\s+/i).filter(Boolean)}function tagPartOfSpeech(e){return e.map((e=>({word:e,tag:posDictionary[e]||"Unknown"})))}function tagNamedEntities(e){const t=nlp(e);return t.people().out("array").map((e=>({word:e,tag:"Person"}))).concat(t.places().out("array").map((e=>({word:e,tag:"Place"})))).concat(t.organizations().out("array").map((e=>({word:e,tag:"Organization"}))))}async function analyzeAndRespond(e){const t=segmentSentences(e),n=[];for(const e of t){const t=normalizeText(e);checkContext(t);const o=tagPartOfSpeech(tokenize(t).map(stemWord).map(lemmatizeWord)),r=tagNamedEntities(t),a=await generateResponse(t,o,r);n.push(a)}return n.join(" ")}async function generateResponse(e,t,n){if(isCalculation(e))return calculate(e);const o=findBestLearningMatch(e);if(o)return o;const r=await queryWikidata(e);if(r)return r;const a=await queryDuckDuckGo(e);if(a)return a;const s=await searchWikipedia(e);return s||"Sorry, I couldn't find any specific information on that. Try asking me something different."}async function searchWikipedia(e){return`Sorry, I couldn't find any specific information, but this may help: ${`https://en.wikipedia.org/w/index.php?search=${encodeURIComponent(e)}`}`}async function queryWikidata(e){const t=tokenize(e).join(" "),n=`https://www.wikidata.org/w/api.php?action=wbsearchentities&search=${encodeURIComponent(t)}&format=json&language=en&limit=1&origin=*`;try{const e=await fetch(n);if(!e.ok)throw new Error("Failed to fetch from Wikidata");const t=await e.json();if(t.search&&t.search.length>0){const e=t.search[0],n=`https://www.wikidata.org/wiki/${e.id}`;return`I found information about "${e.label}": ${e.description||"No description available."} ${n} - Found this on Wikidata`}}catch(e){return console.error("Error fetching from Wikidata:",e),null}return null}async function queryDuckDuckGo(e){const t=`https://api.duckduckgo.com/?q=${encodeURIComponent(e)}&format=json&no_html=1&skip_disambig=1`;try{const e=await fetch(t);if(!e.ok)throw new Error("Failed to fetch from DuckDuckGo");const n=await e.json();let o=null;if(n.AbstractText?o=n.AbstractText:n.RelatedTopics&&n.RelatedTopics.length>0&&(o=n.RelatedTopics[0].Text),o)return`${o}] - Found this on DuckDuckGo`}catch(e){return console.error("Error fetching from DuckDuckGo:",e),null}return null}function isCalculation(e){return/^(\d+(\.\d+)?(\s*[-+*/]\s*\d+(\.\d+)?)+)$/.test(e)}function calculate(e){try{return`The result is: ${new Function(`return ${e}`)()}`}catch(e){return"Sorry, I couldn't calculate that."}}function findBestLearningMatch(e){const t=fuse.search(e);if(t.length>0)return t[0].item.aiResponse;for(const t in responses)if(responses[t].includes(e.toLowerCase()))return responses[t][Math.floor(Math.random()*responses[t].length)];return null}function checkContext(e){e.includes("weather")&&(conversationData.context.weather=!0)}export{analyzeAndRespond,queryWikidata,queryDuckDuckGo,calculate,checkContext};